import pytest
import datetime
from testrail import TestRailAgent

PYTEST_TO_TESTRAIL_STATUS = {
    "passed": 1,
    "failed": 5,
    "skipped": 2,
}


def generate_testrun_name():
    return 'Auto Test {}'.format(
        datetime.datetime.now().strftime('%Y-%m-%d, %H:%M'))


def get_case_ids(items):
    """ Return TestRail ids from pytests markers
    """
    tids = []
    for item in items:
        if item.get_closest_marker('testrail'):
            idmarker = item.get_closest_marker('testrail')
            if idmarker is not None:
                tids.append(idmarker.args[0])
    return tids


class TestRailPlugin():
    def __init__(self, tr_id=None, include_all=False, tr_name=None):
        self.agent = TestRailAgent()
        self.tr_id = int(tr_id) if tr_id else None
        self.include_all = include_all
        self.tr_name = tr_name
        self.results = []
        self.cases = None
        self.case_to_test_map = {}
        if self.tr_id:
            tests = self.agent.get_tests(self.tr_id)
            self.cases = set([x['case_id'] for x in tests['tests']])
            for test in tests['tests']:
                self.case_to_test_map[test['case_id']] = test['id']

    @pytest.hookimpl(trylast=True)
    def pytest_collection_modifyitems(self, session, config, items):
        """ Executed after collecting all test cases

            Create new test run if necessary.
            If so, also map cases to tests
        """
        if not self.cases:
            ids = config.getoption('--ids')
            if ids:
                self.cases = set([int(x) for x in ids.split(',')])

        if self.cases:
            run_items = []
            for item in items:
                idmarker = item.get_closest_marker('testrail')
                if idmarker:
                    tid = idmarker.args[0]
                    if tid in self.cases:
                        run_items.append(item)
            items = run_items

        if config.getoption('--publish'):
            tids = get_case_ids(items)
            tr_name = self.tr_name or generate_testrun_name()
            response = self.agent.add_run(
                            name=tr_name,
                            description='Auto test generated by pytest',
                            include_all=self.include_all,
                            case_ids=tids
                        )
            self.tr_id = int(response['id'])
            #tests = self.agent.get_tests(self.tr_id)
            tests = self.agent.get_tests(self.tr_id)
            #print("tests")
            #print(  tests)
            if not self.cases:
                self.cases = set([x['case_id'] for x in tests['tests']])
               # case_ids = set(x['case_id'] for x in data['tests'])
                #print(self.cases)
            for test in tests['tests']:
                self.case_to_test_map[test['case_id']] = test['id']

    @pytest.hookimpl(tryfirst=True, hookwrapper=True)
    def pytest_runtest_makereport(self, item, call):
        """ handle results after each test
        """
        outcome = yield
        rep = outcome.get_result()
        idmarker = item.get_closest_marker('testrail')
        if idmarker:
            tid = idmarker.args[0]

            if rep.when == 'call' and tid:
                self.add_result(
                    tid,
                    outcome._result.outcome
                )

    @pytest.hookimpl(tryfirst=True)
    def pytest_runtest_setup(self, item):
        """ Plugin deals with testrail
            so if no id or id isn't in test case,
            skip
        """
        idmarker = item.get_closest_marker('testrail')
        if idmarker is None:
            pytest.skip('skip')
        else:
            tid = idmarker.args[0]
            if tid not in self.cases:
                pytest.skip('skip')

    @pytest.hookimpl(trylast=True)
    def pytest_sessionfinish(self, session, exitstatus):
        """ Submit results after session
        """
        data = {'results': self.results}
        if data['results'] and self.tr_id:
            self.agent.add_results(self.tr_id, data)

    def add_result(self, tid, status):
        test_id = self.case_to_test_map.get(tid, None)
        status_id = PYTEST_TO_TESTRAIL_STATUS[status]
        if test_id:
            self.results.append({
                'test_id': test_id,
                'status_id': status_id
            })


